#! /usr/bin/python

#
# A rough skbtrace results parsing demo
#

import getopt
import sys
import os
import time
import glob
import struct
import re

from util import *
import events_common
import events_ipv4

SKBPARSE_VERSION = "0.1.0"

Action_table = {}

class unknown_block:
	def __init__(self, block, trace):
		self.blk = block
		size = block.len - block.common_header_size()
		self.data = trace.read(size)

	def __str__(self):
		s = "action=unknown(%d)" % self.blk.action
		s += " ptr=0x%x flags=0x%x data=%s" % (self.blk.ptr, self.blk.flags, `self.data`)
		return s

class skbtrace_block:
	def __init__(self, trace, channel, cpu):
		global Action_table
		self.channel = channel
		self.cpu = cpu
		self.len = 0
		self.action = 0
		self.flags = 0
		self.ts = None
        	self.seq = 0
		self.ptr = 0
		self.__load(trace)
		event_class = Action_table.get(self.action, unknown_block)
		self.event2 = event_class(self, trace)

	def common_header_size(self):
		s = struct.calcsize("H") # len
		s += struct.calcsize("H") # action
		s += struct.calcsize("I") # flags
		s += struct.calcsize("LL") # ts
		s += struct.calcsize("L") # seq
		s += struct.calcsize("P") # ptr
		return s

	def __load(self, trace):
		size = self.common_header_size()
		binary = trace.read(size)
		if not binary:
			raise ValueError, "invalid skbtace_block"

		fmt = "HHILLLL"
		self.len, self.action, self.flags, self.sec, self.nsec, \
			self.seq, self.ptr = struct.unpack(fmt, binary)

	def __str__(self):
		s = "%ld %ld.%ld cpu=%s channel=%s " % \
			(self.seq, self.sec, self.nsec, \
			self.cpu, self.channel)
		s += str(self.event2)
		return s

	def __cmp__(self, other):
		if self.seq < other.seq:
			return -1
		elif self.seq > other.seq:
			return 1
		return 0

def setup_conf_table(conf_table, key, value):
	if value:
		conf_table[key] = value
	else:
		conf_table[key] = False

def conf(name):
	global Conf_table
	return Conf_table[name]

def show_version(*args):
	print sys.argv[0], "version", SKBPARSE_VERSION
	sys.exit(0)

def show_help(conf_table, *args):
	global Opt_parse_table
	print sys.argv[0], "version", SKBPARSE_VERSION
	print "Usage:"
	for option in Opt_parse_table:
		has_arg, conf_name, msg, callback = Opt_parse_table.get(option)
		if has_arg:
			arg = "ARG"
		else:
			arg = ""
		line = "\t%s %s\t%s" % (option, arg, msg)
		print line
	sys.exit(0)

def option(has_arg, key, default, help, handler = setup_conf_table):
	global Conf_table
	if key:
		Conf_table[key] = default
	return (has_arg, key, help, handler)

Conf_table = {}
Opt_parse_table = {
	"-i" : option(True,  "input-dir",  "./skbtrace.results",   "The results directory that skbtrace utility generated"),
	"-o" : option(True,  "output-fn", "./skbparse.results",   "The results filename that skbparse will generate"),
	"-c" : option(False, "per-cpu",    False, "Generate per-cpu skbparse results, default is all-in-one result file"),
	"-V" : option(False, "verbose",    False, "Show more runtime information"),
	"-s" : option(False, "stdin",      None,  "Use stdin as skbtrace input source, and write parsed result on stdout"),
	"-S" : option(False, "stdout",     None,  "Write parsed result on stdout"),
	"-h" : option(False, "",           None,  "Show usage information", show_help),
	"-v" : option(False, "",           None,  "Show version information", show_version),
}

def handle_args(args):
	global Opt_parse_table, Conf_table
	try:
		opt_string = ""
		for option in Opt_parse_table:
			has_arg, conf_name, msg, callback = Opt_parse_table.get(option)
			opt_string += option[1]
			if has_arg:
				opt_string += ":"
		getopt_list = getopt.getopt(args, opt_string)
	except getopt.GetoptError:
		show_help(Conf_table)
	if getopt_list[1]:
		show_help(Conf_table)
	for key, value in getopt_list[0]:
		has_arg, conf_name, msg, callback = Opt_parse_table.get(key)
		if not has_arg:
			value = True
		callback(Conf_table, conf_name, value)

def skbparse(if_list, out_f):
	n = len(if_list)
	trace_info_list = []
	reg = re.compile(".*trace\.(?P<channel>((hardirq)|(softirq)|(syscall)))\.cpu(?P<cpu>[0-9]+)")
	try:
		for i in range(n):
			in_f = if_list[i]
			channel = reg.match(in_f.name).groupdict()["channel"]
			cpu = reg.match(in_f.name).groupdict()["cpu"]
			trace_info_list.append((in_f, channel, cpu))
		try:
			while True:
				all_eof = True
				blk_list = []
				for i in range(n):
					in_f, channel, cpu = trace_info_list[i]
					try:
						blk = skbtrace_block(in_f, channel, cpu)
						blk_list.append(blk)
						all_eof = False
					except ValueError:
						pass
				if all_eof:
					break
				for blk in blk_list:
					out_f.write(str(blk) + "\n")
		except KeyboardInterrupt:
			pass
	finally:
		for i in range(n):
			in_f = if_list[i]
			in_f.close()
		out_f.close()

def setup_action_table():
	for m in (events_common, events_ipv4):
		for e in m.events_list:
			Action_table[e.action] = e

def open_input():
	input_dir = conf("input-dir")
	hw = glob.glob(input_dir + "/trace.hardirq.cpu*")
	si = glob.glob(input_dir + "/trace.softirq.cpu*")
	sc = glob.glob(input_dir + "/trace.syscall.cpu*")
	results = hw + si + sc
	if not results:
		print "Can't find skbtrace results in", input_dir
		sys.exit(1)
	if_list = []
	for f in results:
		if_list.append(open_file(f, "r"))
	return if_list

def open_output():
	if conf("stdout"):
		return sys.stdout
	return open_file(conf("output-fn"), "w")

if __name__ == "__main__":
	setup_action_table()
	handle_args(sys.argv[1:])
	if_list = open_input()
	of = open_output()
	if conf("verbose"):
		print "skbtrace result files:"
		map(lambda x: sys.stdout.write("\t" + x.name + "\n"), if_list)
		print "skbparse result file:", of.name
	skbparse(if_list, of)
