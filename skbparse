#! /usr/bin/python

#
# A rough skbtrace results parsing demo
#

import getopt
import sys
import os
import time
import glob
import struct
import re
import socket

SKBPARSE_VERSION = "0.1.0"

SZ_SOCKADDR_IN4 = 16
SZ_SOCKADDR_IN6 = 28

SZ_ADDR_IN4 = 4
SZ_ADDR_IN6 = 16

def parse_sockaddr(sockaddr):
	family = sockaddr[:2]
	family = (ord(family[1]) << 8) + ord(family[0])
	if family == socket.AF_INET:
		sin_port = sockaddr[2:2+2]
		port = (ord(sin_port[0]) << 8) + ord(sin_port[1])
		sin_addr = sockaddr[4:4+SZ_ADDR_IN4]
		addr = socket.inet_ntop(socket.AF_INET, sin_addr)
		sz = SZ_SOCKADDR_IN4
	else:
		addr = "Not-IPv4"
		port = 0
		sz = 0
	return (addr, port), sz

def setup_conf_table(conf_table, key, value):
	if value:
		conf_table[key] = value
	else:
		conf_table[key] = False

def conf(name):
	global Conf_table
	return Conf_table[name]

def show_version(*args):
	print sys.argv[0], "version", SKBPARSE_VERSION
	sys.exit(0)

def show_help(conf_table, *args):
	global Opt_parse_table
	print sys.argv[0], "version", SKBPARSE_VERSION
	print "Usage:"
	for option in Opt_parse_table:
		has_arg, conf_name, msg, callback = Opt_parse_table.get(option)
		if has_arg:
			arg = "ARG"
		else:
			arg = ""
		line = "\t%s %s\t%s" % (option, arg, msg)
		print line
	sys.exit(0)

def option(has_arg, key, default, help, handler = setup_conf_table):
	global Conf_table
	if key:
		Conf_table[key] = default
	return (has_arg, key, help, handler)

Conf_table = {}
Opt_parse_table = {
	"-i" : option(True,  "input-dir",  "./skbtrace.results",   "The results directory that skbtrace utility generated"),
	"-o" : option(True,  "output-dir", "./skbparse.results",   "The results directory that skbparse will generate"),
	"-c" : option(False, "per-cpu",    False, "Generate per-cpu skbparse results, default is all-in-one result file"),
	"-V" : option(False, "verbose",    False, "Show more runtime information"),
	"-s" : option(False, "stdin",      None,  "Use stdin as skbtrace input source, and write parsed result on stdout"),
	"-S" : option(False, "stdout",     None,  "Write parsed result on stdout"),
	"-h" : option(False, "",           None,  "Show usage information", show_help),
	"-v" : option(False, "",           None,  "Show version information", show_version),
}

def handle_args(args):
	global Opt_parse_table, Conf_table
	try:
		opt_string = ""
		for option in Opt_parse_table:
			has_arg, conf_name, msg, callback = Opt_parse_table.get(option)
			opt_string += option[1]
			if has_arg:
				opt_string += ":"
		getopt_list = getopt.getopt(args, opt_string)
	except getopt.GetoptError:
		show_help(Conf_table)
	if getopt_list[1]:
		show_help(Conf_table)
	for key, value in getopt_list[0]:
		has_arg, conf_name, msg, callback = Opt_parse_table.get(key)
		if not has_arg:
			value = True
		callback(Conf_table, conf_name, value)

channel_table = {
	0 : "syscall",
	1 : "softirq",
	2 : "hardirq",
}

af_table = {
	0        : "AF_UNSPEC",
	1	 : "AF_UNIX",
	1	 : "AF_LOCAL",
	2	 : "AF_INET",
	3	 : "AF_AX25",
	4	 : "AF_IPX",
	5	 : "AF_APPLETALK",
	6	 : "AF_NETROM",
	7	 : "AF_BRIDGE",
	8	 : "AF_ATMPVC",
	9	 : "AF_X25",
	10	: "AF_INET6",
	11	: "AF_ROSE",
	12	: "AF_DECnet",
	13	: "AF_NETBEUI",
	14	: "AF_SECURITY",
	15        : "AF_KEY",
	16        : "AF_NETLINK/ROUTE",
	17	: "AF_PACKET",
	18	: "AF_ASH",
	19	: "AF_ECONET",
	20	: "AF_ATMSVC",
	21	: "AF_RDS",
	22	: "AF_SNA",
	23	: "AF_IRDA",
	24	: "AF_PPPOX",
	25	: "AF_WANPIPE",
	26	: "AF_LLC",
	29	: "AF_CAN",
	30	: "AF_TIPC",
	31	: "AF_BLUETOOTH",
	32	: "AF_IUCV",
	33	: "AF_RXRPC",
	34	: "AF_ISDN",
	35	: "AF_PHONET",
	36	: "AF_IEEE802154",
	37	: "AF_CAIF",
	38	: "AF_ALG",
	39	: "AF_NFC",
}

#
# kernel/include/linux/skbtrace_api.h
#
taskctx_flags = {
#	bit :	(desc-if-bit-set,	desc-if-bit-clear)
	4 :	("tx",			"rx"),
}

icsk_conn_flags = {
	13 : ("LISTEN",		""),
}

tcp_conn_flags = {
	4  : ("ESTABLISHED",	""),
	5  : ("SYN_SENT",	""),
	6  : ("SYN_RECV",	""),
	7  : ("FIN_WAIT1",	""),
	8  : ("FIN_WAIT2",	""),
	9  : ("TIME_WAIT",	""),
	10 : ("CLOSE",		""),
	11 : ("CLOSE_WAIT",	""),
	12 : ("LAST_ACK",	""),
}

tcp_cong_flags = {
#	bit :	(desc-if-bit-set,	desc-if-bit-clear)
	4 :	("cwr",			""),
	5 :	("loss",		""),
	6 :	("fast-rtx",		""),
	7 :	("frto",		""),
	8 :	("frto-loss",		""),
	9 :	("leave",		""),
}

tcp_sendlim_flags = {
	4 :     ("cwnd",		""),
	5 :     ("swnd",		""),
	6 :     ("nagle",		""),
	7 :     ("tso",			""),
	8 :     ("frag",		""),
	9 :     ("pushone",		""),
	10 :     ("other",		""),
	11 :     ("ok",			""),
}

def rps_info_data_desc(ptr, flags, data):
	queue_fmt = "Hxx"
	rest_fmt = "IIIIIHHBxxx"
	rx_queue = struct.unpack(queue_fmt, data[0:4])
	rx_hash, cpu, ifindex, src, dst, sport, dport, proto = struct.unpack(rest_fmt, data[4:])
	desc = "skb=0x%x" % ptr
	desc += " rx-queue=%d" % rx_queue
	desc += " rx-hash=0x%x" % rx_hash
	desc += " cpu=0x%x" % cpu
	desc += " ifindex=%d" % ifindex
	desc += " src=0x%x" % src
	desc += " dst=0x%x" % dst
	desc += " sport=%d" % sport
	desc += " dport=%d" % dport
	desc += " proto=0x%x" % proto
	return desc

def tcp_cong_data_desc(ptr, flags, data):
	fmt = "IIIII"
	rcv_rtt, rto, cwnd, sndnxt, snduna = struct.unpack(fmt, data)
	desc  = "sock=0x%x" % ptr
	desc += " cwnd=%d" % cwnd
	desc += " rto=%d" % rto
	desc += " rcv_rtt=%d" % rcv_rtt
	desc += " sndnxt=%d" % sndnxt
	desc += " snduna=%d" % snduna
	return desc

def icsk_conn_data_desc(ptr, flags, data):
	desc  = "sock=0x%x" % ptr
	local, size = parse_sockaddr(data)
	if size:
		desc += " local=%s:%d" % (local[0], local[1])
	return desc

def tcp_conn_data_desc(ptr, flags, data):
	desc  = "sock=0x%x" % ptr
	local, size = parse_sockaddr(data)
	if size:
		desc += " local=%s:%d" % (local[0], local[1])
		if not (flags & ((1<<8)|(1<<9)|(1<<13))):
			peer, size = parse_sockaddr(data[size:])
			desc += " peer=%s:%d" % (peer[0], peer[1])
	return desc

def tcp_sendlim_data_desc(ptr, flags, data):
	desc  = "sock=0x%x" % ptr
	fmt = "IILLIIII"
	val, cnt, sec, nsec, ssthresh, cwnd, cnt, swnd = struct.unpack(fmt, data)
	desc += " begin=%d.%d" % (sec, nsec)
	desc += " cnt=%d" % cnt
	if (1<<11) & flags: #OK
		desc += " sentpkts=%d" % val
	elif (1<<10) & flags: # other
		desc += " errcode=%d" % val
	else:
		desc += " mtuprobe=%d" % val
	desc += " ssthresh=%d cwnd=%d/%d swnd=%d" % (ssthresh, cwnd, cnt, swnd)
	return desc

def unknown_data_desc(ptr, flags, data):
	return "FIXME: unknown ptr=0x%x flags=0x%x data=%s" % (ptr, flags, `data`)

Action_table = {
#	action :	(action_desc,	flags_table,		seq_table,	data_desc),
########Common########
	1   :		("rps_info",	{},			{},		rps_info_data_desc),
########TCP##########
	101 :		("tcp_cong",	tcp_cong_flags,		{},		tcp_cong_data_desc),
	102 :		("tcp_conn",	tcp_conn_flags,		{},		tcp_conn_data_desc),
	103 :		("tcp_sendlim",	tcp_sendlim_flags,	{},		tcp_sendlim_data_desc),
########ICSK##########
	201 :		("icsk_conn",	icsk_conn_flags,	{},		icsk_conn_data_desc),
}

def get_long_size():
	machine = os.uname()[-1]
	if machine == "x86_64":
		return 8
	else:
		return 4
Size_long = get_long_size()

def parse_skbtrace_header(ifile, ofile, cpu, channel, hdr):
	global Action_table
	hdr_fmt = "HHILLPL"
	hdr_size = 2 + 2 + 4 + Size_long * 3 + 8
	size, action, flags, sec, nsec, seq, ptr = struct.unpack(hdr_fmt, hdr)
	action_str, flags_table, seqf_table, data_desc = \
		Action_table.get(action, (hex(action), {}, {}, unknown_data_desc))
	flags_desc = ""
	for f in flags_table:
		if (1 << f) & flags:
			desc = flags_table[f][0]
		else:
			desc = flags_table[f][1]
		if desc:
			flags_desc += desc + ","
	if flags_desc != "":
		flags_desc = "[" + flags_desc[:-1] + "] "
	elif seqf_table:
		flags_desc = "[" + seqf_table[flags] + "] "

	ofile.write("%ld " % seq)
	ofile.write("%d.%d " % (sec, nsec))
	ofile.write("cpu=%s " % cpu)
	ofile.write("channel=%s " % channel)
	ofile.write("action=%s " % action_str)
	ofile.write(" " + flags_desc)

	data_size = size - hdr_size
	if data_size:
		data = ifile.read(data_size)
	else:
		data = ""
	if data:
		ofile.write(" " + data_desc(ptr, flags, data))
	ofile.write("\n")
	return size

def locate_skbtrace_results():
	input_dir = conf("input-dir")
	hw = glob.glob(input_dir + "/trace.hardirq.cpu*")
	si = glob.glob(input_dir + "/trace.softirq.cpu*")
	sc = glob.glob(input_dir + "/trace.syscall.cpu*")
	results = hw + si + sc
	if not results:
		print "Can't find skbtrace results in", input_dir
		sys.exit(1)
	return results

def create_skbparse_results(skbtrace_list):
	use_stdout = conf("stdout")
	if use_stdout:
		return []
	output_dir = conf("output-dir")
	if not os.path.isdir(output_dir):
		print "Invalid output directory", output_dir
		sys.exit(1)
	results = []
	for trace in skbtrace_list:
		parsed = output_dir + "/parsed." + os.path.basename(trace)
		results.append(parsed)
	return results

def open_file(fn, mode):
	try:
		return file(fn, mode)
	except IOError, OSError:
		print "Can't open", ifn
		sys.exit(1)

def do_stdin_skbparse():
	trace = sys.stdin
	parse = sys.stdout
	metadata_fmt = "LLL"
	metadata_size = Size_long * 3 # cpu, channel-id, data-length-in-bytes
	hdr_fmt = "HHILLPL"
	hdr_size = 2 + 2 + 4 + Size_long * 3 + 8

	binary = trace.read(metadata_size)
	while binary:
		cpu, channel, pktlen = struct.unpack(metadata_fmt, binary)
		channel = channel_table.get(channel, "unknown/%d" % channel)
		done = 0
		while done < pktlen:
			binary = trace.read(hdr_size)
			trace_size = parse_skbtrace_header(trace, parse, cpu, channel, binary)
			done += trace_size
		binary = trace.read(metadata_size)

def do_skbparse(ifn = "", ofn = ""):
	try:
		try:
			trace = parse = None
			if not ifn:
				return do_stdin_skbparse()
			reg = re.compile(".*trace\.(?P<channel>((hardirq)|(softirq)|(syscall)))\.cpu(?P<cpu>[0-9]+)")
			channel = reg.match(ifn).groupdict()["channel"]
			cpu = reg.match(ifn).groupdict()["cpu"]
			trace = open_file(ifn, "r")
			if ofn:
				parse = open_file(ofn, "w")
			else:
				parse = sys.stdout
			size_long = get_long_size()
			hdr_size = 2 + 2 + 4 + size_long * 3 + 8
			binary = trace.read(hdr_size)
			while binary:
				parse_skbtrace_header(trace, parse, cpu, channel, binary)
				binary = trace.read(hdr_size)
		except KeyboardInterrupt:
			trace and trace.close()
			trace = None
			ofn and parse.close()
			parse = None
	finally:
		trace and trace.close()
		ofn and parse.close()

def skbparse(skbtrace_list = [], skbparse_list = []):
	if not skbtrace_list:
		do_skbparse()
		return
	size = len(skbtrace_list)
	for i in range(size):
		skbtrace = skbtrace_list[i]
		if skbparse_list:
			skbparse = skbparse_list[i]
		else:
			skbparse = ""
		do_skbparse(skbtrace, skbparse)

if __name__ == "__main__":
	handle_args(sys.argv[1:])
	if conf("stdin"):
		skbparse()
		sys.exit(0)
	skbtrace_list = locate_skbtrace_results()
	skbparse_list = create_skbparse_results(skbtrace_list)
	if conf("verbose"):
		print "skbtrace result files:"
		map(lambda x: sys.stdout.write("\t" + x + "\n"), skbtrace_list)
		print "skbparse result files:"
		map(lambda x: sys.stdout.write("\t" + x + "\n"), skbparse_list)
	skbparse(skbtrace_list, skbparse_list)
